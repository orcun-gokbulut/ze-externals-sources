// This code contains NVIDIA Confidential Information and is disclosed to you 
// under a form of NVIDIA software license agreement provided separately to you.
//
// Notice
// NVIDIA Corporation and its licensors retain all intellectual property and
// proprietary rights in and to this software and related documentation and 
// any modifications thereto. Any use, reproduction, disclosure, or 
// distribution of this software and related documentation without an express 
// license agreement from NVIDIA Corporation is strictly prohibited.
// 
// ALL NVIDIA DESIGN SPECIFICATIONS, CODE ARE PROVIDED "AS IS.". NVIDIA MAKES
// NO WARRANTIES, EXPRESSED, IMPLIED, STATUTORY, OR OTHERWISE WITH RESPECT TO
// THE MATERIALS, AND EXPRESSLY DISCLAIMS ALL IMPLIED WARRANTIES OF NONINFRINGEMENT,
// MERCHANTABILITY, AND FITNESS FOR A PARTICULAR PURPOSE.
//
// Information and code furnished is believed to be accurate and reliable.
// However, NVIDIA Corporation assumes no responsibility for the consequences of use of such
// information or for any infringement of patents or other rights of third parties that may
// result from its use. No license is granted by implication or otherwise under any patent
// or patent rights of NVIDIA Corporation. Details are subject to change without notice.
// This code supersedes and replaces all information previously supplied.
// NVIDIA Corporation products are not authorized for use as critical
// components in life support devices or systems without express written approval of
// NVIDIA Corporation.
//
// Copyright (c) 2008-2011 NVIDIA Corporation. All rights reserved.
// Copyright (c) 2004-2008 AGEIA Technologies, Inc. All rights reserved.
// Copyright (c) 2001-2004 NovodeX AG. All rights reserved.

// This code is auto-generated by the PhysX Clang metadata generator.  Do not edit or be
// prepared for your edits to be quietly ignored next time the clang metadata generator is
// run.  You can find the most recent version of clang metadata generator by contacting
// Chris Nuernberger <chrisn@nvidia.com> or Dilip or Adam.
// The source code for the generate was at one time checked into:
// physx/PhysXMetaDataGenerator/llvm/tools/clang/lib/Frontend/PhysXMetaDataAction.cpp
#include "PxMetaDataObjects.h"
#include "PxPhysicsAPI.h"
#include "PxExtensionsAPI.h"
inline unsigned int getPxHeightFieldDescNbRows( const PxHeightFieldDesc* inOwner ) { return inOwner->nbRows; }
inline void setPxHeightFieldDescNbRows( PxHeightFieldDesc* inOwner, unsigned int inData) { inOwner->nbRows = inData; }
inline unsigned int getPxHeightFieldDescNbColumns( const PxHeightFieldDesc* inOwner ) { return inOwner->nbColumns; }
inline void setPxHeightFieldDescNbColumns( PxHeightFieldDesc* inOwner, unsigned int inData) { inOwner->nbColumns = inData; }
inline PxHeightFieldFormat::Enum getPxHeightFieldDescFormat( const PxHeightFieldDesc* inOwner ) { return inOwner->format; }
inline void setPxHeightFieldDescFormat( PxHeightFieldDesc* inOwner, PxHeightFieldFormat::Enum inData) { inOwner->format = inData; }
inline PxStridedData getPxHeightFieldDescSamples( const PxHeightFieldDesc* inOwner ) { return inOwner->samples; }
inline void setPxHeightFieldDescSamples( PxHeightFieldDesc* inOwner, PxStridedData inData) { inOwner->samples = inData; }
inline float getPxHeightFieldDescThickness( const PxHeightFieldDesc* inOwner ) { return inOwner->thickness; }
inline void setPxHeightFieldDescThickness( PxHeightFieldDesc* inOwner, float inData) { inOwner->thickness = inData; }
inline float getPxHeightFieldDescConvexEdgeThreshold( const PxHeightFieldDesc* inOwner ) { return inOwner->convexEdgeThreshold; }
inline void setPxHeightFieldDescConvexEdgeThreshold( PxHeightFieldDesc* inOwner, float inData) { inOwner->convexEdgeThreshold = inData; }
inline PxFlags<PxHeightFieldFlag::Enum, PxU16> getPxHeightFieldDescFlags( const PxHeightFieldDesc* inOwner ) { return inOwner->flags; }
inline void setPxHeightFieldDescFlags( PxHeightFieldDesc* inOwner, PxFlags<PxHeightFieldFlag::Enum, PxU16> inData) { inOwner->flags = inData; }
_Bool getPxHeightFieldDesc_Valid( const PxHeightFieldDesc* inObj ) { return inObj->isValid(); }
PxHeightFieldDescGeneratedInfo::PxHeightFieldDescGeneratedInfo()
	: Valid( "Valid", getPxHeightFieldDesc_Valid)
	, NbRows( "NbRows", setPxHeightFieldDescNbRows, getPxHeightFieldDescNbRows )
	, NbColumns( "NbColumns", setPxHeightFieldDescNbColumns, getPxHeightFieldDescNbColumns )
	, Format( "Format", setPxHeightFieldDescFormat, getPxHeightFieldDescFormat )
	, Samples( "Samples", setPxHeightFieldDescSamples, getPxHeightFieldDescSamples )
	, Thickness( "Thickness", setPxHeightFieldDescThickness, getPxHeightFieldDescThickness )
	, ConvexEdgeThreshold( "ConvexEdgeThreshold", setPxHeightFieldDescConvexEdgeThreshold, getPxHeightFieldDescConvexEdgeThreshold )
	, Flags( "Flags", setPxHeightFieldDescFlags, getPxHeightFieldDescFlags )
{}
inline void * getPxShapeUserData( const PxShape* inOwner ) { return inOwner->userData; }
inline void setPxShapeUserData( PxShape* inOwner, void * inData) { inOwner->userData = inData; }
PxGeometryType::Enum getPxShape_GeometryType( const PxShape* inObj ) { return inObj->getGeometryType(); }
void setPxShape_Geometry( PxShape* inObj, const PxGeometry & inArg){ inObj->setGeometry( inArg ); }
PxRigidActor & getPxShape_Actor( const PxShape* inObj ) { return inObj->getActor(); }
PxBounds3 getPxShape_WorldBounds( const PxShape* inObj ) { return inObj->getWorldBounds(); }
void setPxShape_LocalPose( PxShape* inObj, const PxTransform & inArg){ inObj->setLocalPose( inArg ); }
PxTransform getPxShape_LocalPose( const PxShape* inObj ) { return inObj->getLocalPose(); }
void setPxShape_SimulationFilterData( PxShape* inObj, const PxFilterData & inArg){ inObj->setSimulationFilterData( inArg ); }
PxFilterData getPxShape_SimulationFilterData( const PxShape* inObj ) { return inObj->getSimulationFilterData(); }
void setPxShape_QueryFilterData( PxShape* inObj, const PxFilterData & inArg){ inObj->setQueryFilterData( inArg ); }
PxFilterData getPxShape_QueryFilterData( const PxShape* inObj ) { return inObj->getQueryFilterData(); }
PxU32 getPxShape_Materials( const PxShape* inObj, PxMaterial** outBuffer, PxU32 inBufSize ) { return inObj->getMaterials( outBuffer, inBufSize ); }
PxU32 getNbPxShape_Materials( const PxShape* inObj ) { return inObj->getNbMaterials(  ); }
void setPxShape_ContactOffset( PxShape* inObj, PxReal inArg){ inObj->setContactOffset( inArg ); }
PxReal getPxShape_ContactOffset( const PxShape* inObj ) { return inObj->getContactOffset(); }
void setPxShape_RestOffset( PxShape* inObj, PxReal inArg){ inObj->setRestOffset( inArg ); }
PxReal getPxShape_RestOffset( const PxShape* inObj ) { return inObj->getRestOffset(); }
void setPxShape_Flags( PxShape* inObj, PxShapeFlags inArg){ inObj->setFlags( inArg ); }
PxShapeFlags getPxShape_Flags( const PxShape* inObj ) { return inObj->getFlags(); }
void setPxShape_Name( PxShape* inObj, const char * inArg){ inObj->setName( inArg ); }
const char * getPxShape_Name( const PxShape* inObj ) { return inObj->getName(); }
PxShapeGeneratedInfo::PxShapeGeneratedInfo()
	: GeometryType( "GeometryType", getPxShape_GeometryType)
	, Geometry( "Geometry", setPxShape_Geometry)
	, Actor( "Actor", getPxShape_Actor)
	, WorldBounds( "WorldBounds", getPxShape_WorldBounds)
	, LocalPose( "LocalPose", setPxShape_LocalPose, getPxShape_LocalPose)
	, SimulationFilterData( "SimulationFilterData", setPxShape_SimulationFilterData, getPxShape_SimulationFilterData)
	, QueryFilterData( "QueryFilterData", setPxShape_QueryFilterData, getPxShape_QueryFilterData)
	, Materials( "Materials", getPxShape_Materials, getNbPxShape_Materials )
	, ContactOffset( "ContactOffset", setPxShape_ContactOffset, getPxShape_ContactOffset)
	, RestOffset( "RestOffset", setPxShape_RestOffset, getPxShape_RestOffset)
	, Flags( "Flags", setPxShape_Flags, getPxShape_Flags)
	, Name( "Name", setPxShape_Name, getPxShape_Name)
	, UserData( "UserData", setPxShapeUserData, getPxShapeUserData )
{}
inline void * getPxActorUserData( const PxActor* inOwner ) { return inOwner->userData; }
inline void setPxActorUserData( PxActor* inOwner, void * inData) { inOwner->userData = inData; }
const char * getPxActor_ClassName( const PxActor* inObj ) { return inObj->getClassName(); }
PxActorType::Enum getPxActor_Type( const PxActor* inObj ) { return inObj->getType(); }
const PxRigidStatic * getPxActor_RigidStatic( const PxActor* inObj ) { return inObj->isRigidStatic(); }
const PxRigidDynamic * getPxActor_RigidDynamic( const PxActor* inObj ) { return inObj->isRigidDynamic(); }
const PxParticleSystem * getPxActor_ParticleSystem( const PxActor* inObj ) { return inObj->isParticleSystem(); }
const PxParticleFluid * getPxActor_ParticleFluid( const PxActor* inObj ) { return inObj->isParticleFluid(); }
const PxDeformable * getPxActor_Deformable( const PxActor* inObj ) { return inObj->isDeformable(); }
const PxArticulationLink * getPxActor_ArticulationLink( const PxActor* inObj ) { return inObj->isArticulationLink(); }
PxScene * getPxActor_Scene( const PxActor* inObj ) { return inObj->getScene(); }
void setPxActor_Name( PxActor* inObj, const char * inArg){ inObj->setName( inArg ); }
const char * getPxActor_Name( const PxActor* inObj ) { return inObj->getName(); }
PxBounds3 getPxActor_WorldBounds( const PxActor* inObj ) { return inObj->getWorldBounds(); }
void setPxActor_ActorFlags( PxActor* inObj, PxActorFlags inArg){ inObj->setActorFlags( inArg ); }
PxActorFlags getPxActor_ActorFlags( const PxActor* inObj ) { return inObj->getActorFlags(); }
void setPxActor_DominanceGroup( PxActor* inObj, PxDominanceGroup inArg){ inObj->setDominanceGroup( inArg ); }
PxDominanceGroup getPxActor_DominanceGroup( const PxActor* inObj ) { return inObj->getDominanceGroup(); }
void setPxActor_OwnerClient( PxActor* inObj, PxClientID inArg){ inObj->setOwnerClient( inArg ); }
PxClientID getPxActor_OwnerClient( const PxActor* inObj ) { return inObj->getOwnerClient(); }
void setPxActor_ClientBehaviorBits( PxActor* inObj, PxU32 inArg){ inObj->setClientBehaviorBits( inArg ); }
PxU32 getPxActor_ClientBehaviorBits( const PxActor* inObj ) { return inObj->getClientBehaviorBits(); }
PxAggregate * getPxActor_Aggregate( const PxActor* inObj ) { return inObj->getAggregate(); }
PxActorGeneratedInfo::PxActorGeneratedInfo()
	: ClassName( "ClassName", getPxActor_ClassName)
	, Type( "Type", getPxActor_Type)
	, RigidStatic( "RigidStatic", getPxActor_RigidStatic)
	, RigidDynamic( "RigidDynamic", getPxActor_RigidDynamic)
	, ParticleSystem( "ParticleSystem", getPxActor_ParticleSystem)
	, ParticleFluid( "ParticleFluid", getPxActor_ParticleFluid)
	, Deformable( "Deformable", getPxActor_Deformable)
	, ArticulationLink( "ArticulationLink", getPxActor_ArticulationLink)
	, Scene( "Scene", getPxActor_Scene)
	, Name( "Name", setPxActor_Name, getPxActor_Name)
	, WorldBounds( "WorldBounds", getPxActor_WorldBounds)
	, ActorFlags( "ActorFlags", setPxActor_ActorFlags, getPxActor_ActorFlags)
	, DominanceGroup( "DominanceGroup", setPxActor_DominanceGroup, getPxActor_DominanceGroup)
	, OwnerClient( "OwnerClient", setPxActor_OwnerClient, getPxActor_OwnerClient)
	, ClientBehaviorBits( "ClientBehaviorBits", setPxActor_ClientBehaviorBits, getPxActor_ClientBehaviorBits)
	, Aggregate( "Aggregate", getPxActor_Aggregate)
	, UserData( "UserData", setPxActorUserData, getPxActorUserData )
{}
const char * getPxRigidActor_ClassName( const PxRigidActor* inObj ) { return inObj->getClassName(); }
PxTransform getPxRigidActor_GlobalPose( const PxRigidActor* inObj ) { return inObj->getGlobalPose(); }
PxU32 getPxRigidActor_Shapes( const PxRigidActor* inObj, PxShape** outBuffer, PxU32 inBufSize ) { return inObj->getShapes( outBuffer, inBufSize ); }
PxU32 getNbPxRigidActor_Shapes( const PxRigidActor* inObj ) { return inObj->getNbShapes(  ); }
PxU32 getPxRigidActor_Constraints( const PxRigidActor* inObj, PxConstraint** outBuffer, PxU32 inBufSize ) { return inObj->getConstraints( outBuffer, inBufSize ); }
PxU32 getNbPxRigidActor_Constraints( const PxRigidActor* inObj ) { return inObj->getNbConstraints(  ); }
PxRigidActorGeneratedInfo::PxRigidActorGeneratedInfo()
	: ClassName( "ClassName", getPxRigidActor_ClassName)
	, GlobalPose( "GlobalPose", getPxRigidActor_GlobalPose)
	, Shapes( "Shapes", getPxRigidActor_Shapes, getNbPxRigidActor_Shapes )
	, Constraints( "Constraints", getPxRigidActor_Constraints, getNbPxRigidActor_Constraints )
{}
void setPxRigidStatic_GlobalPose( PxRigidStatic* inObj, const PxTransform & inArg){ inObj->setGlobalPose( inArg ); }
PxTransform getPxRigidStatic_GlobalPose( const PxRigidStatic* inObj ) { return inObj->getGlobalPose(); }
PxRigidStaticGeneratedInfo::PxRigidStaticGeneratedInfo()
	: GlobalPose( "GlobalPose", setPxRigidStatic_GlobalPose, getPxRigidStatic_GlobalPose)
{}
void setPxRigidBody_CMassLocalPose( PxRigidBody* inObj, const PxTransform & inArg){ inObj->setCMassLocalPose( inArg ); }
PxTransform getPxRigidBody_CMassLocalPose( const PxRigidBody* inObj ) { return inObj->getCMassLocalPose(); }
void setPxRigidBody_Mass( PxRigidBody* inObj, PxReal inArg){ inObj->setMass( inArg ); }
PxReal getPxRigidBody_Mass( const PxRigidBody* inObj ) { return inObj->getMass(); }
void setPxRigidBody_MassSpaceInertiaTensor( PxRigidBody* inObj, const PxVec3 & inArg){ inObj->setMassSpaceInertiaTensor( inArg ); }
PxVec3 getPxRigidBody_MassSpaceInertiaTensor( const PxRigidBody* inObj ) { return inObj->getMassSpaceInertiaTensor(); }
void setPxRigidBody_GlobalPose( PxRigidBody* inObj, const PxTransform & inArg){ inObj->setGlobalPose( inArg ); }
PxTransform getPxRigidBody_GlobalPose( const PxRigidBody* inObj ) { return inObj->getGlobalPose(); }
void setPxRigidBody_LinearVelocity( PxRigidBody* inObj, const PxVec3 & inArg){ inObj->setLinearVelocity( inArg ); }
PxVec3 getPxRigidBody_LinearVelocity( const PxRigidBody* inObj ) { return inObj->getLinearVelocity(); }
void setPxRigidBody_AngularVelocity( PxRigidBody* inObj, const PxVec3 & inArg){ inObj->setAngularVelocity( inArg ); }
PxVec3 getPxRigidBody_AngularVelocity( const PxRigidBody* inObj ) { return inObj->getAngularVelocity(); }
PxRigidBodyGeneratedInfo::PxRigidBodyGeneratedInfo()
	: CMassLocalPose( "CMassLocalPose", setPxRigidBody_CMassLocalPose, getPxRigidBody_CMassLocalPose)
	, Mass( "Mass", setPxRigidBody_Mass, getPxRigidBody_Mass)
	, MassSpaceInertiaTensor( "MassSpaceInertiaTensor", setPxRigidBody_MassSpaceInertiaTensor, getPxRigidBody_MassSpaceInertiaTensor)
	, GlobalPose( "GlobalPose", setPxRigidBody_GlobalPose, getPxRigidBody_GlobalPose)
	, LinearVelocity( "LinearVelocity", setPxRigidBody_LinearVelocity, getPxRigidBody_LinearVelocity)
	, AngularVelocity( "AngularVelocity", setPxRigidBody_AngularVelocity, getPxRigidBody_AngularVelocity)
{}
void setPxRigidDynamic_LinearDamping( PxRigidDynamic* inObj, PxReal inArg){ inObj->setLinearDamping( inArg ); }
PxReal getPxRigidDynamic_LinearDamping( const PxRigidDynamic* inObj ) { return inObj->getLinearDamping(); }
void setPxRigidDynamic_AngularDamping( PxRigidDynamic* inObj, PxReal inArg){ inObj->setAngularDamping( inArg ); }
PxReal getPxRigidDynamic_AngularDamping( const PxRigidDynamic* inObj ) { return inObj->getAngularDamping(); }
void setPxRigidDynamic_MaxAngularVelocity( PxRigidDynamic* inObj, PxReal inArg){ inObj->setMaxAngularVelocity( inArg ); }
PxReal getPxRigidDynamic_MaxAngularVelocity( const PxRigidDynamic* inObj ) { return inObj->getMaxAngularVelocity(); }
_Bool getPxRigidDynamic_Sleeping( const PxRigidDynamic* inObj ) { return inObj->isSleeping(); }
void setPxRigidDynamic_SleepEnergyThreshold( PxRigidDynamic* inObj, PxReal inArg){ inObj->setSleepEnergyThreshold( inArg ); }
PxReal getPxRigidDynamic_SleepEnergyThreshold( const PxRigidDynamic* inObj ) { return inObj->getSleepEnergyThreshold(); }
void setPxRigidDynamic_SolverIterationCounts( PxRigidDynamic* inObj, PxU32 inArg0, PxU32 inArg1 ) { inObj->setSolverIterationCounts( inArg0, inArg1 ); }
void getPxRigidDynamic_SolverIterationCounts( const PxRigidDynamic* inObj, PxU32& inArg0, PxU32& inArg1 ) { inObj->getSolverIterationCounts( inArg0, inArg1 ); }
void setPxRigidDynamic_ContactReportThreshold( PxRigidDynamic* inObj, PxReal inArg){ inObj->setContactReportThreshold( inArg ); }
PxReal getPxRigidDynamic_ContactReportThreshold( const PxRigidDynamic* inObj ) { return inObj->getContactReportThreshold(); }
void setPxRigidDynamic_RigidDynamicFlags( PxRigidDynamic* inObj, PxRigidDynamicFlags inArg){ inObj->setRigidDynamicFlags( inArg ); }
PxRigidDynamicFlags getPxRigidDynamic_RigidDynamicFlags( const PxRigidDynamic* inObj ) { return inObj->getRigidDynamicFlags(); }
PxRigidDynamicGeneratedInfo::PxRigidDynamicGeneratedInfo()
	: LinearDamping( "LinearDamping", setPxRigidDynamic_LinearDamping, getPxRigidDynamic_LinearDamping)
	, AngularDamping( "AngularDamping", setPxRigidDynamic_AngularDamping, getPxRigidDynamic_AngularDamping)
	, MaxAngularVelocity( "MaxAngularVelocity", setPxRigidDynamic_MaxAngularVelocity, getPxRigidDynamic_MaxAngularVelocity)
	, Sleeping( "Sleeping", getPxRigidDynamic_Sleeping)
	, SleepEnergyThreshold( "SleepEnergyThreshold", setPxRigidDynamic_SleepEnergyThreshold, getPxRigidDynamic_SleepEnergyThreshold)
	, SolverIterationCounts( "SolverIterationCounts", "minPositionIters", "minVelocityIters", setPxRigidDynamic_SolverIterationCounts, getPxRigidDynamic_SolverIterationCounts)
	, ContactReportThreshold( "ContactReportThreshold", setPxRigidDynamic_ContactReportThreshold, getPxRigidDynamic_ContactReportThreshold)
	, RigidDynamicFlags( "RigidDynamicFlags", setPxRigidDynamic_RigidDynamicFlags, getPxRigidDynamic_RigidDynamicFlags)
{}
const char * getPxConstraint_ClassName( const PxConstraint* inObj ) { return inObj->getClassName(); }
PxScene * getPxConstraint_Scene( const PxConstraint* inObj ) { return inObj->getScene(); }
void setPxConstraint_Actors( PxConstraint* inObj, PxRigidActor * inArg0, PxRigidActor * inArg1 ) { inObj->setActors( inArg0, inArg1 ); }
void getPxConstraint_Actors( const PxConstraint* inObj, PxRigidActor *& inArg0, PxRigidActor *& inArg1 ) { inObj->getActors( inArg0, inArg1 ); }
void setPxConstraint_Flags( PxConstraint* inObj, PxConstraintFlags inArg){ inObj->setFlags( inArg ); }
PxConstraintFlags getPxConstraint_Flags( const PxConstraint* inObj ) { return inObj->getFlags(); }
void setPxConstraint_BreakImpulse( PxConstraint* inObj, PxReal inArg0, PxReal inArg1 ) { inObj->setBreakImpulse( inArg0, inArg1 ); }
void getPxConstraint_BreakImpulse( const PxConstraint* inObj, PxReal& inArg0, PxReal& inArg1 ) { inObj->getBreakImpulse( inArg0, inArg1 ); }
PxConstraintGeneratedInfo::PxConstraintGeneratedInfo()
	: ClassName( "ClassName", getPxConstraint_ClassName)
	, Scene( "Scene", getPxConstraint_Scene)
	, Actors( "Actors", "actor0", "actor1", setPxConstraint_Actors, getPxConstraint_Actors)
	, Flags( "Flags", setPxConstraint_Flags, getPxConstraint_Flags)
	, BreakImpulse( "BreakImpulse", "linear", "angular", setPxConstraint_BreakImpulse, getPxConstraint_BreakImpulse)
{}
inline void * getPxArticulationUserData( const PxArticulation* inOwner ) { return inOwner->userData; }
inline void setPxArticulationUserData( PxArticulation* inOwner, void * inData) { inOwner->userData = inData; }
PxScene * getPxArticulation_Scene( const PxArticulation* inObj ) { return inObj->getScene(); }
void setPxArticulation_MaxProjectionIterations( PxArticulation* inObj, PxU32 inArg){ inObj->setMaxProjectionIterations( inArg ); }
PxU32 getPxArticulation_MaxProjectionIterations( const PxArticulation* inObj ) { return inObj->getMaxProjectionIterations(); }
void setPxArticulation_SeparationTolerance( PxArticulation* inObj, PxReal inArg){ inObj->setSeparationTolerance( inArg ); }
PxReal getPxArticulation_SeparationTolerance( const PxArticulation* inObj ) { return inObj->getSeparationTolerance(); }
void setPxArticulation_InternalDriveIterations( PxArticulation* inObj, PxU32 inArg){ inObj->setInternalDriveIterations( inArg ); }
PxU32 getPxArticulation_InternalDriveIterations( const PxArticulation* inObj ) { return inObj->getInternalDriveIterations(); }
void setPxArticulation_ExternalDriveIterations( PxArticulation* inObj, PxU32 inArg){ inObj->setExternalDriveIterations( inArg ); }
PxU32 getPxArticulation_ExternalDriveIterations( const PxArticulation* inObj ) { return inObj->getExternalDriveIterations(); }
PxU32 getPxArticulation_Links( const PxArticulation* inObj, PxArticulationLink** outBuffer, PxU32 inBufSize ) { return inObj->getLinks( outBuffer, inBufSize ); }
PxU32 getNbPxArticulation_Links( const PxArticulation* inObj ) { return inObj->getNbLinks(  ); }
void setPxArticulation_Name( PxArticulation* inObj, const char * inArg){ inObj->setName( inArg ); }
const char * getPxArticulation_Name( const PxArticulation* inObj ) { return inObj->getName(); }
PxBounds3 getPxArticulation_WorldBounds( const PxArticulation* inObj ) { return inObj->getWorldBounds(); }
PxAggregate * getPxArticulation_Aggregate( const PxArticulation* inObj ) { return inObj->getAggregate(); }
PxArticulationGeneratedInfo::PxArticulationGeneratedInfo()
	: Scene( "Scene", getPxArticulation_Scene)
	, MaxProjectionIterations( "MaxProjectionIterations", setPxArticulation_MaxProjectionIterations, getPxArticulation_MaxProjectionIterations)
	, SeparationTolerance( "SeparationTolerance", setPxArticulation_SeparationTolerance, getPxArticulation_SeparationTolerance)
	, InternalDriveIterations( "InternalDriveIterations", setPxArticulation_InternalDriveIterations, getPxArticulation_InternalDriveIterations)
	, ExternalDriveIterations( "ExternalDriveIterations", setPxArticulation_ExternalDriveIterations, getPxArticulation_ExternalDriveIterations)
	, Links( "Links", getPxArticulation_Links, getNbPxArticulation_Links )
	, Name( "Name", setPxArticulation_Name, getPxArticulation_Name)
	, WorldBounds( "WorldBounds", getPxArticulation_WorldBounds)
	, Aggregate( "Aggregate", getPxArticulation_Aggregate)
	, UserData( "UserData", setPxArticulationUserData, getPxArticulationUserData )
{}
inline void * getPxMaterialUserData( const PxMaterial* inOwner ) { return inOwner->userData; }
inline void setPxMaterialUserData( PxMaterial* inOwner, void * inData) { inOwner->userData = inData; }
void setPxMaterial_DynamicFriction( PxMaterial* inObj, PxReal inArg){ inObj->setDynamicFriction( inArg ); }
PxReal getPxMaterial_DynamicFriction( const PxMaterial* inObj ) { return inObj->getDynamicFriction(); }
void setPxMaterial_StaticFriction( PxMaterial* inObj, PxReal inArg){ inObj->setStaticFriction( inArg ); }
PxReal getPxMaterial_StaticFriction( const PxMaterial* inObj ) { return inObj->getStaticFriction(); }
void setPxMaterial_Restitution( PxMaterial* inObj, PxReal inArg){ inObj->setRestitution( inArg ); }
PxReal getPxMaterial_Restitution( const PxMaterial* inObj ) { return inObj->getRestitution(); }
void setPxMaterial_DynamicFrictionV( PxMaterial* inObj, PxReal inArg){ inObj->setDynamicFrictionV( inArg ); }
PxReal getPxMaterial_DynamicFrictionV( const PxMaterial* inObj ) { return inObj->getDynamicFrictionV(); }
void setPxMaterial_StaticFrictionV( PxMaterial* inObj, PxReal inArg){ inObj->setStaticFrictionV( inArg ); }
PxReal getPxMaterial_StaticFrictionV( const PxMaterial* inObj ) { return inObj->getStaticFrictionV(); }
void setPxMaterial_DirOfAnisotropy( PxMaterial* inObj, const PxVec3 & inArg){ inObj->setDirOfAnisotropy( inArg ); }
PxVec3 getPxMaterial_DirOfAnisotropy( const PxMaterial* inObj ) { return inObj->getDirOfAnisotropy(); }
void setPxMaterial_Flags( PxMaterial* inObj, PxMaterialFlags inArg){ inObj->setFlags( inArg ); }
PxMaterialFlags getPxMaterial_Flags( const PxMaterial* inObj ) { return inObj->getFlags(); }
void setPxMaterial_FrictionCombineMode( PxMaterial* inObj, PxCombineMode::Enum inArg){ inObj->setFrictionCombineMode( inArg ); }
PxCombineMode::Enum getPxMaterial_FrictionCombineMode( const PxMaterial* inObj ) { return inObj->getFrictionCombineMode(); }
void setPxMaterial_RestitutionCombineMode( PxMaterial* inObj, PxCombineMode::Enum inArg){ inObj->setRestitutionCombineMode( inArg ); }
PxCombineMode::Enum getPxMaterial_RestitutionCombineMode( const PxMaterial* inObj ) { return inObj->getRestitutionCombineMode(); }
PxMaterialGeneratedInfo::PxMaterialGeneratedInfo()
	: DynamicFriction( "DynamicFriction", setPxMaterial_DynamicFriction, getPxMaterial_DynamicFriction)
	, StaticFriction( "StaticFriction", setPxMaterial_StaticFriction, getPxMaterial_StaticFriction)
	, Restitution( "Restitution", setPxMaterial_Restitution, getPxMaterial_Restitution)
	, DynamicFrictionV( "DynamicFrictionV", setPxMaterial_DynamicFrictionV, getPxMaterial_DynamicFrictionV)
	, StaticFrictionV( "StaticFrictionV", setPxMaterial_StaticFrictionV, getPxMaterial_StaticFrictionV)
	, DirOfAnisotropy( "DirOfAnisotropy", setPxMaterial_DirOfAnisotropy, getPxMaterial_DirOfAnisotropy)
	, Flags( "Flags", setPxMaterial_Flags, getPxMaterial_Flags)
	, FrictionCombineMode( "FrictionCombineMode", setPxMaterial_FrictionCombineMode, getPxMaterial_FrictionCombineMode)
	, RestitutionCombineMode( "RestitutionCombineMode", setPxMaterial_RestitutionCombineMode, getPxMaterial_RestitutionCombineMode)
	, UserData( "UserData", setPxMaterialUserData, getPxMaterialUserData )
{}
inline void * getPxSceneUserData( const PxScene* inOwner ) { return inOwner->userData; }
inline void setPxSceneUserData( PxScene* inOwner, void * inData) { inOwner->userData = inData; }
PxSceneFlags getPxScene_Flags( const PxScene* inObj ) { return inObj->getFlags(); }
void setPxScene_Gravity( PxScene* inObj, const PxVec3 & inArg){ inObj->setGravity( inArg ); }
PxVec3 getPxScene_Gravity( const PxScene* inObj ) { return inObj->getGravity(); }
PxU32 getPxScene_Actors( const PxScene* inObj, PxActorTypeSelectionFlags inFilter, PxActor** outBuffer, PxU32 inBufSize ) { return inObj->getActors( inFilter, outBuffer, inBufSize ); }
PxU32 getNbPxScene_Actors( const PxScene* inObj, PxActorTypeSelectionFlags inFilter ) { return inObj->getNbActors( inFilter ); }
PxU32 getPxScene_Articulations( const PxScene* inObj, PxArticulation** outBuffer, PxU32 inBufSize ) { return inObj->getArticulations( outBuffer, inBufSize ); }
PxU32 getNbPxScene_Articulations( const PxScene* inObj ) { return inObj->getNbArticulations(  ); }
PxU32 getPxScene_Constraints( const PxScene* inObj, PxConstraint** outBuffer, PxU32 inBufSize ) { return inObj->getConstraints( outBuffer, inBufSize ); }
PxU32 getNbPxScene_Constraints( const PxScene* inObj ) { return inObj->getNbConstraints(  ); }
PxU32 getPxScene_Attachments( const PxScene* inObj, PxAttachment** outBuffer, PxU32 inBufSize ) { return inObj->getAttachments( outBuffer, inBufSize ); }
PxU32 getNbPxScene_Attachments( const PxScene* inObj ) { return inObj->getNbAttachments(  ); }
void setPxScene_ClientBehaviorBits( PxScene* inObj, PxClientID inIndex, PxU32 inArg ){ inObj->setClientBehaviorBits( inIndex, inArg ); }
PxU32 getPxScene_ClientBehaviorBits( const PxScene* inObj, PxClientID inIndex ) { return inObj->getClientBehaviorBits( inIndex ); }
void setPxScene_ContactModifyCallback( PxScene* inObj, PxContactModifyCallback * inArg){ inObj->setContactModifyCallback( inArg ); }
PxContactModifyCallback * getPxScene_ContactModifyCallback( const PxScene* inObj ) { return inObj->getContactModifyCallback(); }
const void * getPxScene_FilterShaderData( const PxScene* inObj ) { return inObj->getFilterShaderData(); }
PxU32 getPxScene_FilterShaderDataSize( const PxScene* inObj ) { return inObj->getFilterShaderDataSize(); }
PxSimulationFilterShader  getPxScene_FilterShader( const PxScene* inObj ) { return inObj->getFilterShader(); }
PxSimulationFilterCallback * getPxScene_FilterCallback( const PxScene* inObj ) { return inObj->getFilterCallback(); }
void setPxScene_DynamicTreeRebuildRateHint( PxScene* inObj, PxU32 inArg){ inObj->setDynamicTreeRebuildRateHint( inArg ); }
PxU32 getPxScene_DynamicTreeRebuildRateHint( const PxScene* inObj ) { return inObj->getDynamicTreeRebuildRateHint(); }
void setPxScene_SolverBatchSize( PxScene* inObj, PxU32 inArg){ inObj->setSolverBatchSize( inArg ); }
PxU32 getPxScene_SolverBatchSize( const PxScene* inObj ) { return inObj->getSolverBatchSize(); }
void setPxScene_VisualizationCullingBox( PxScene* inObj, const PxBounds3 & inArg){ inObj->setVisualizationCullingBox( inArg ); }
const PxBounds3 & getPxScene_VisualizationCullingBox( const PxScene* inObj ) { return inObj->getVisualizationCullingBox(); }
physx::pxtask::TaskManager * getPxScene_TaskManager( const PxScene* inObj ) { return inObj->getTaskManager(); }
PxSceneGeneratedInfo::PxSceneGeneratedInfo()
	: Flags( "Flags", getPxScene_Flags)
	, Gravity( "Gravity", setPxScene_Gravity, getPxScene_Gravity)
	, Actors( "Actors", getPxScene_Actors, getNbPxScene_Actors )
	, Articulations( "Articulations", getPxScene_Articulations, getNbPxScene_Articulations )
	, Constraints( "Constraints", getPxScene_Constraints, getNbPxScene_Constraints )
	, Attachments( "Attachments", getPxScene_Attachments, getNbPxScene_Attachments )
	, ClientBehaviorBits( "ClientBehaviorBits", setPxScene_ClientBehaviorBits, getPxScene_ClientBehaviorBits)
	, ContactModifyCallback( "ContactModifyCallback", setPxScene_ContactModifyCallback, getPxScene_ContactModifyCallback)
	, FilterShaderData( "FilterShaderData", getPxScene_FilterShaderData)
	, FilterShaderDataSize( "FilterShaderDataSize", getPxScene_FilterShaderDataSize)
	, FilterShader( "FilterShader", getPxScene_FilterShader)
	, FilterCallback( "FilterCallback", getPxScene_FilterCallback)
	, DynamicTreeRebuildRateHint( "DynamicTreeRebuildRateHint", setPxScene_DynamicTreeRebuildRateHint, getPxScene_DynamicTreeRebuildRateHint)
	, SolverBatchSize( "SolverBatchSize", setPxScene_SolverBatchSize, getPxScene_SolverBatchSize)
	, VisualizationCullingBox( "VisualizationCullingBox", setPxScene_VisualizationCullingBox, getPxScene_VisualizationCullingBox)
	, TaskManager( "TaskManager", getPxScene_TaskManager)
	, UserData( "UserData", setPxSceneUserData, getPxSceneUserData )
{}
inline float getPxTolerancesScaleLength( const PxTolerancesScale* inOwner ) { return inOwner->length; }
inline void setPxTolerancesScaleLength( PxTolerancesScale* inOwner, float inData) { inOwner->length = inData; }
inline float getPxTolerancesScaleMass( const PxTolerancesScale* inOwner ) { return inOwner->mass; }
inline void setPxTolerancesScaleMass( PxTolerancesScale* inOwner, float inData) { inOwner->mass = inData; }
inline float getPxTolerancesScaleSpeed( const PxTolerancesScale* inOwner ) { return inOwner->speed; }
inline void setPxTolerancesScaleSpeed( PxTolerancesScale* inOwner, float inData) { inOwner->speed = inData; }
_Bool getPxTolerancesScale_Valid( const PxTolerancesScale* inObj ) { return inObj->isValid(); }
PxTolerancesScaleGeneratedInfo::PxTolerancesScaleGeneratedInfo()
	: Valid( "Valid", getPxTolerancesScale_Valid)
	, Length( "Length", setPxTolerancesScaleLength, getPxTolerancesScaleLength )
	, Mass( "Mass", setPxTolerancesScaleMass, getPxTolerancesScaleMass )
	, Speed( "Speed", setPxTolerancesScaleSpeed, getPxTolerancesScaleSpeed )
{}
PxGeometryType::Enum getPxGeometry_Type( const PxGeometry* inObj ) { return inObj->getType(); }
PxGeometryGeneratedInfo::PxGeometryGeneratedInfo()
	: Type( "Type", getPxGeometry_Type)
{}
PxU32 getPxPhysics_Scenes( const PxPhysics* inObj, PxScene** outBuffer, PxU32 inBufSize ) { return inObj->getScenes( outBuffer, inBufSize ); }
PxU32 getNbPxPhysics_Scenes( const PxPhysics* inObj ) { return inObj->getNbScenes(  ); }
PxScene* createPxPhysics_Scenes( PxPhysics* inObj, const PxSceneDesc & inCreateParam ){ return inObj->createScene( inCreateParam ); }
PxU32 getPxPhysics_Materials( const PxPhysics* inObj, PxMaterial** outBuffer, PxU32 inBufSize ) { return inObj->getMaterials( outBuffer, inBufSize ); }
PxU32 getNbPxPhysics_Materials( const PxPhysics* inObj ) { return inObj->getNbMaterials(  ); }
PxMaterial* createPxPhysics_Materials( PxPhysics* inObj, class PxMaterialDesc const & inCreateParam ){ return inObj->createMaterial( inCreateParam ); }
PxU32 getPxPhysics_TriangleMeshes( const PxPhysics* inObj, PxTriangleMesh** outBuffer, PxU32 inBufSize ) { return inObj->getTriangleMeshes( outBuffer, inBufSize ); }
PxU32 getNbPxPhysics_TriangleMeshes( const PxPhysics* inObj ) { return inObj->getNbTriangleMeshes(  ); }
PxTriangleMesh* createPxPhysics_TriangleMeshes( PxPhysics* inObj, const PxStream & inCreateParam ){ return inObj->createTriangleMesh( inCreateParam ); }
PxU32 getPxPhysics_HeightFields( const PxPhysics* inObj, PxHeightField** outBuffer, PxU32 inBufSize ) { return inObj->getHeightFields( outBuffer, inBufSize ); }
PxU32 getNbPxPhysics_HeightFields( const PxPhysics* inObj ) { return inObj->getNbHeightFields(  ); }
PxHeightField* createPxPhysics_HeightFields( PxPhysics* inObj, const PxHeightFieldDesc & inCreateParam ){ return inObj->createHeightField( inCreateParam ); }
PxU32 getPxPhysics_ConvexMeshes( const PxPhysics* inObj, PxConvexMesh** outBuffer, PxU32 inBufSize ) { return inObj->getConvexMeshes( outBuffer, inBufSize ); }
PxU32 getNbPxPhysics_ConvexMeshes( const PxPhysics* inObj ) { return inObj->getNbConvexMeshes(  ); }
PxConvexMesh* createPxPhysics_ConvexMeshes( PxPhysics* inObj, const PxStream & inCreateParam ){ return inObj->createConvexMesh( inCreateParam ); }
PxU32 getPxPhysics_DeformableMeshes( const PxPhysics* inObj, PxDeformableMesh** outBuffer, PxU32 inBufSize ) { return inObj->getDeformableMeshes( outBuffer, inBufSize ); }
PxU32 getNbPxPhysics_DeformableMeshes( const PxPhysics* inObj ) { return inObj->getNbDeformableMeshes(  ); }
PxDeformableMesh* createPxPhysics_DeformableMeshes( PxPhysics* inObj, const PxStream & inCreateParam ){ return inObj->createDeformableMesh( inCreateParam ); }
const PxTolerancesScale & getPxPhysics_TolerancesScale( const PxPhysics* inObj ) { return inObj->getTolerancesScale(); }
PxPhysicsGeneratedInfo::PxPhysicsGeneratedInfo()
	: Scenes( "Scenes", getPxPhysics_Scenes, getNbPxPhysics_Scenes, createPxPhysics_Scenes )
	, Materials( "Materials", getPxPhysics_Materials, getNbPxPhysics_Materials, createPxPhysics_Materials )
	, TriangleMeshes( "TriangleMeshes", getPxPhysics_TriangleMeshes, getNbPxPhysics_TriangleMeshes, createPxPhysics_TriangleMeshes )
	, HeightFields( "HeightFields", getPxPhysics_HeightFields, getNbPxPhysics_HeightFields, createPxPhysics_HeightFields )
	, ConvexMeshes( "ConvexMeshes", getPxPhysics_ConvexMeshes, getNbPxPhysics_ConvexMeshes, createPxPhysics_ConvexMeshes )
	, DeformableMeshes( "DeformableMeshes", getPxPhysics_DeformableMeshes, getNbPxPhysics_DeformableMeshes, createPxPhysics_DeformableMeshes )
	, TolerancesScale( "TolerancesScale", getPxPhysics_TolerancesScale)
{}
PxArticulation & getPxArticulationLink_Articulation( const PxArticulationLink* inObj ) { return inObj->getArticulation(); }
PxArticulationJoint * getPxArticulationLink_InboundJoint( const PxArticulationLink* inObj ) { return inObj->getInboundJoint(); }
PxU32 getPxArticulationLink_Children( const PxArticulationLink* inObj, PxArticulationLink** outBuffer, PxU32 inBufSize ) { return inObj->getChildren( outBuffer, inBufSize ); }
PxU32 getNbPxArticulationLink_Children( const PxArticulationLink* inObj ) { return inObj->getNbChildren(  ); }
PxArticulationLinkGeneratedInfo::PxArticulationLinkGeneratedInfo()
	: Articulation( "Articulation", getPxArticulationLink_Articulation)
	, InboundJoint( "InboundJoint", getPxArticulationLink_InboundJoint)
	, Children( "Children", getPxArticulationLink_Children, getNbPxArticulationLink_Children )
{}
inline float getPxSphereGeometryRadius( const PxSphereGeometry* inOwner ) { return inOwner->radius; }
inline void setPxSphereGeometryRadius( PxSphereGeometry* inOwner, float inData) { inOwner->radius = inData; }
_Bool getPxSphereGeometry_Valid( const PxSphereGeometry* inObj ) { return inObj->isValid(); }
PxSphereGeometryGeneratedInfo::PxSphereGeometryGeneratedInfo()
	: Valid( "Valid", getPxSphereGeometry_Valid)
	, Radius( "Radius", setPxSphereGeometryRadius, getPxSphereGeometryRadius )
{}
inline PxVec3 getPxBoxGeometryHalfExtents( const PxBoxGeometry* inOwner ) { return inOwner->halfExtents; }
inline void setPxBoxGeometryHalfExtents( PxBoxGeometry* inOwner, PxVec3 inData) { inOwner->halfExtents = inData; }
_Bool getPxBoxGeometry_Valid( const PxBoxGeometry* inObj ) { return inObj->isValid(); }
PxBoxGeometryGeneratedInfo::PxBoxGeometryGeneratedInfo()
	: Valid( "Valid", getPxBoxGeometry_Valid)
	, HalfExtents( "HalfExtents", setPxBoxGeometryHalfExtents, getPxBoxGeometryHalfExtents )
{}
inline float getPxCapsuleGeometryRadius( const PxCapsuleGeometry* inOwner ) { return inOwner->radius; }
inline void setPxCapsuleGeometryRadius( PxCapsuleGeometry* inOwner, float inData) { inOwner->radius = inData; }
inline float getPxCapsuleGeometryHalfHeight( const PxCapsuleGeometry* inOwner ) { return inOwner->halfHeight; }
inline void setPxCapsuleGeometryHalfHeight( PxCapsuleGeometry* inOwner, float inData) { inOwner->halfHeight = inData; }
_Bool getPxCapsuleGeometry_Valid( const PxCapsuleGeometry* inObj ) { return inObj->isValid(); }
PxCapsuleGeometryGeneratedInfo::PxCapsuleGeometryGeneratedInfo()
	: Valid( "Valid", getPxCapsuleGeometry_Valid)
	, Radius( "Radius", setPxCapsuleGeometryRadius, getPxCapsuleGeometryRadius )
	, HalfHeight( "HalfHeight", setPxCapsuleGeometryHalfHeight, getPxCapsuleGeometryHalfHeight )
{}
_Bool getPxPlaneGeometry_Valid( const PxPlaneGeometry* inObj ) { return inObj->isValid(); }
PxPlaneGeometryGeneratedInfo::PxPlaneGeometryGeneratedInfo()
	: Valid( "Valid", getPxPlaneGeometry_Valid)
{}
inline PxMeshScale getPxConvexMeshGeometryScale( const PxConvexMeshGeometry* inOwner ) { return inOwner->scale; }
inline void setPxConvexMeshGeometryScale( PxConvexMeshGeometry* inOwner, PxMeshScale inData) { inOwner->scale = inData; }
inline PxConvexMesh * getPxConvexMeshGeometryConvexMesh( const PxConvexMeshGeometry* inOwner ) { return inOwner->convexMesh; }
inline void setPxConvexMeshGeometryConvexMesh( PxConvexMeshGeometry* inOwner, PxConvexMesh * inData) { inOwner->convexMesh = inData; }
_Bool getPxConvexMeshGeometry_Valid( const PxConvexMeshGeometry* inObj ) { return inObj->isValid(); }
PxConvexMeshGeometryGeneratedInfo::PxConvexMeshGeometryGeneratedInfo()
	: Valid( "Valid", getPxConvexMeshGeometry_Valid)
	, Scale( "Scale", setPxConvexMeshGeometryScale, getPxConvexMeshGeometryScale )
	, ConvexMesh( "ConvexMesh", setPxConvexMeshGeometryConvexMesh, getPxConvexMeshGeometryConvexMesh )
{}
inline PxMeshScale getPxTriangleMeshGeometryScale( const PxTriangleMeshGeometry* inOwner ) { return inOwner->scale; }
inline void setPxTriangleMeshGeometryScale( PxTriangleMeshGeometry* inOwner, PxMeshScale inData) { inOwner->scale = inData; }
inline PxFlags<PxMeshGeometryFlag::Enum, PxU8> getPxTriangleMeshGeometryMeshFlags( const PxTriangleMeshGeometry* inOwner ) { return inOwner->meshFlags; }
inline void setPxTriangleMeshGeometryMeshFlags( PxTriangleMeshGeometry* inOwner, PxFlags<PxMeshGeometryFlag::Enum, PxU8> inData) { inOwner->meshFlags = inData; }
inline PxTriangleMesh * getPxTriangleMeshGeometryTriangleMesh( const PxTriangleMeshGeometry* inOwner ) { return inOwner->triangleMesh; }
inline void setPxTriangleMeshGeometryTriangleMesh( PxTriangleMeshGeometry* inOwner, PxTriangleMesh * inData) { inOwner->triangleMesh = inData; }
_Bool getPxTriangleMeshGeometry_Valid( const PxTriangleMeshGeometry* inObj ) { return inObj->isValid(); }
PxTriangleMeshGeometryGeneratedInfo::PxTriangleMeshGeometryGeneratedInfo()
	: Valid( "Valid", getPxTriangleMeshGeometry_Valid)
	, Scale( "Scale", setPxTriangleMeshGeometryScale, getPxTriangleMeshGeometryScale )
	, MeshFlags( "MeshFlags", setPxTriangleMeshGeometryMeshFlags, getPxTriangleMeshGeometryMeshFlags )
	, TriangleMesh( "TriangleMesh", setPxTriangleMeshGeometryTriangleMesh, getPxTriangleMeshGeometryTriangleMesh )
{}
inline PxHeightField * getPxHeightFieldGeometryHeightField( const PxHeightFieldGeometry* inOwner ) { return inOwner->heightField; }
inline void setPxHeightFieldGeometryHeightField( PxHeightFieldGeometry* inOwner, PxHeightField * inData) { inOwner->heightField = inData; }
inline float getPxHeightFieldGeometryHeightScale( const PxHeightFieldGeometry* inOwner ) { return inOwner->heightScale; }
inline void setPxHeightFieldGeometryHeightScale( PxHeightFieldGeometry* inOwner, float inData) { inOwner->heightScale = inData; }
inline float getPxHeightFieldGeometryRowScale( const PxHeightFieldGeometry* inOwner ) { return inOwner->rowScale; }
inline void setPxHeightFieldGeometryRowScale( PxHeightFieldGeometry* inOwner, float inData) { inOwner->rowScale = inData; }
inline float getPxHeightFieldGeometryColumnScale( const PxHeightFieldGeometry* inOwner ) { return inOwner->columnScale; }
inline void setPxHeightFieldGeometryColumnScale( PxHeightFieldGeometry* inOwner, float inData) { inOwner->columnScale = inData; }
inline PxFlags<PxMeshGeometryFlag::Enum, PxU8> getPxHeightFieldGeometryHeightFieldFlags( const PxHeightFieldGeometry* inOwner ) { return inOwner->heightFieldFlags; }
inline void setPxHeightFieldGeometryHeightFieldFlags( PxHeightFieldGeometry* inOwner, PxFlags<PxMeshGeometryFlag::Enum, PxU8> inData) { inOwner->heightFieldFlags = inData; }
_Bool getPxHeightFieldGeometry_Valid( const PxHeightFieldGeometry* inObj ) { return inObj->isValid(); }
PxHeightFieldGeometryGeneratedInfo::PxHeightFieldGeometryGeneratedInfo()
	: Valid( "Valid", getPxHeightFieldGeometry_Valid)
	, HeightField( "HeightField", setPxHeightFieldGeometryHeightField, getPxHeightFieldGeometryHeightField )
	, HeightScale( "HeightScale", setPxHeightFieldGeometryHeightScale, getPxHeightFieldGeometryHeightScale )
	, RowScale( "RowScale", setPxHeightFieldGeometryRowScale, getPxHeightFieldGeometryRowScale )
	, ColumnScale( "ColumnScale", setPxHeightFieldGeometryColumnScale, getPxHeightFieldGeometryColumnScale )
	, HeightFieldFlags( "HeightFieldFlags", setPxHeightFieldGeometryHeightFieldFlags, getPxHeightFieldGeometryHeightFieldFlags )
{}
void setPxArticulationJoint_ParentPose( PxArticulationJoint* inObj, const PxTransform & inArg){ inObj->setParentPose( inArg ); }
PxTransform getPxArticulationJoint_ParentPose( const PxArticulationJoint* inObj ) { return inObj->getParentPose(); }
void setPxArticulationJoint_ChildPose( PxArticulationJoint* inObj, const PxTransform & inArg){ inObj->setChildPose( inArg ); }
PxTransform getPxArticulationJoint_ChildPose( const PxArticulationJoint* inObj ) { return inObj->getChildPose(); }
void setPxArticulationJoint_TargetOrientation( PxArticulationJoint* inObj, const PxQuat & inArg){ inObj->setTargetOrientation( inArg ); }
PxQuat getPxArticulationJoint_TargetOrientation( const PxArticulationJoint* inObj ) { return inObj->getTargetOrientation(); }
void setPxArticulationJoint_TargetVelocity( PxArticulationJoint* inObj, const PxVec3 & inArg){ inObj->setTargetVelocity( inArg ); }
PxVec3 getPxArticulationJoint_TargetVelocity( const PxArticulationJoint* inObj ) { return inObj->getTargetVelocity(); }
void setPxArticulationJoint_Spring( PxArticulationJoint* inObj, PxReal inArg){ inObj->setSpring( inArg ); }
PxReal getPxArticulationJoint_Spring( const PxArticulationJoint* inObj ) { return inObj->getSpring(); }
void setPxArticulationJoint_Damping( PxArticulationJoint* inObj, PxReal inArg){ inObj->setDamping( inArg ); }
PxReal getPxArticulationJoint_Damping( const PxArticulationJoint* inObj ) { return inObj->getDamping(); }
void setPxArticulationJoint_InternalCompliance( PxArticulationJoint* inObj, PxReal inArg){ inObj->setInternalCompliance( inArg ); }
PxReal getPxArticulationJoint_InternalCompliance( const PxArticulationJoint* inObj ) { return inObj->getInternalCompliance(); }
void setPxArticulationJoint_ExternalCompliance( PxArticulationJoint* inObj, PxReal inArg){ inObj->setExternalCompliance( inArg ); }
PxReal getPxArticulationJoint_ExternalCompliance( const PxArticulationJoint* inObj ) { return inObj->getExternalCompliance(); }
void setPxArticulationJoint_SwingLimit( PxArticulationJoint* inObj, PxReal inArg0, PxReal inArg1 ) { inObj->setSwingLimit( inArg0, inArg1 ); }
void getPxArticulationJoint_SwingLimit( const PxArticulationJoint* inObj, PxReal& inArg0, PxReal& inArg1 ) { inObj->getSwingLimit( inArg0, inArg1 ); }
void setPxArticulationJoint_SwingLimitEnabled( PxArticulationJoint* inObj, _Bool inArg){ inObj->setSwingLimitEnabled( inArg ); }
_Bool getPxArticulationJoint_SwingLimitEnabled( const PxArticulationJoint* inObj ) { return inObj->getSwingLimitEnabled(); }
void setPxArticulationJoint_TwistLimit( PxArticulationJoint* inObj, PxReal inArg0, PxReal inArg1 ) { inObj->setTwistLimit( inArg0, inArg1 ); }
void getPxArticulationJoint_TwistLimit( const PxArticulationJoint* inObj, PxReal& inArg0, PxReal& inArg1 ) { inObj->getTwistLimit( inArg0, inArg1 ); }
void setPxArticulationJoint_TwistLimitEnabled( PxArticulationJoint* inObj, _Bool inArg){ inObj->setTwistLimitEnabled( inArg ); }
_Bool getPxArticulationJoint_TwistLimitEnabled( const PxArticulationJoint* inObj ) { return inObj->getTwistLimitEnabled(); }
PxArticulationJointGeneratedInfo::PxArticulationJointGeneratedInfo()
	: ParentPose( "ParentPose", setPxArticulationJoint_ParentPose, getPxArticulationJoint_ParentPose)
	, ChildPose( "ChildPose", setPxArticulationJoint_ChildPose, getPxArticulationJoint_ChildPose)
	, TargetOrientation( "TargetOrientation", setPxArticulationJoint_TargetOrientation, getPxArticulationJoint_TargetOrientation)
	, TargetVelocity( "TargetVelocity", setPxArticulationJoint_TargetVelocity, getPxArticulationJoint_TargetVelocity)
	, Spring( "Spring", setPxArticulationJoint_Spring, getPxArticulationJoint_Spring)
	, Damping( "Damping", setPxArticulationJoint_Damping, getPxArticulationJoint_Damping)
	, InternalCompliance( "InternalCompliance", setPxArticulationJoint_InternalCompliance, getPxArticulationJoint_InternalCompliance)
	, ExternalCompliance( "ExternalCompliance", setPxArticulationJoint_ExternalCompliance, getPxArticulationJoint_ExternalCompliance)
	, SwingLimit( "SwingLimit", "yLimit", "zLimit", setPxArticulationJoint_SwingLimit, getPxArticulationJoint_SwingLimit)
	, SwingLimitEnabled( "SwingLimitEnabled", setPxArticulationJoint_SwingLimitEnabled, getPxArticulationJoint_SwingLimitEnabled)
	, TwistLimit( "TwistLimit", "lower", "upper", setPxArticulationJoint_TwistLimit, getPxArticulationJoint_TwistLimit)
	, TwistLimitEnabled( "TwistLimitEnabled", setPxArticulationJoint_TwistLimitEnabled, getPxArticulationJoint_TwistLimitEnabled)
{}
inline PxVec3 getPxMeshScaleScale( const PxMeshScale* inOwner ) { return inOwner->scale; }
inline void setPxMeshScaleScale( PxMeshScale* inOwner, PxVec3 inData) { inOwner->scale = inData; }
inline PxQuat getPxMeshScaleRotation( const PxMeshScale* inOwner ) { return inOwner->rotation; }
inline void setPxMeshScaleRotation( PxMeshScale* inOwner, PxQuat inData) { inOwner->rotation = inData; }
_Bool getPxMeshScale_Identity( const PxMeshScale* inObj ) { return inObj->isIdentity(); }
PxMeshScale getPxMeshScale_Inverse( const PxMeshScale* inObj ) { return inObj->getInverse(); }
PxMeshScaleGeneratedInfo::PxMeshScaleGeneratedInfo()
	: Identity( "Identity", getPxMeshScale_Identity)
	, Inverse( "Inverse", getPxMeshScale_Inverse)
	, Scale( "Scale", setPxMeshScaleScale, getPxMeshScaleScale )
	, Rotation( "Rotation", setPxMeshScaleRotation, getPxMeshScaleRotation )
{}
inline void * getPxJointUserData( const PxJoint* inOwner ) { return inOwner->userData; }
inline void setPxJointUserData( PxJoint* inOwner, void * inData) { inOwner->userData = inData; }
void setPxJoint_Actors( PxJoint* inObj, PxRigidActor * inArg0, PxRigidActor * inArg1 ) { inObj->setActors( inArg0, inArg1 ); }
void getPxJoint_Actors( const PxJoint* inObj, PxRigidActor *& inArg0, PxRigidActor *& inArg1 ) { inObj->getActors( inArg0, inArg1 ); }
void setPxJoint_LocalPose( PxJoint* inObj, PxU32 inIndex, PxTransform inArg ){ inObj->setLocalPose( inIndex, inArg ); }
PxTransform getPxJoint_LocalPose( const PxJoint* inObj, PxU32 inIndex ) { return inObj->getLocalPose( inIndex ); }
void setPxJoint_BreakForce( PxJoint* inObj, PxReal inArg0, PxReal inArg1 ) { inObj->setBreakForce( inArg0, inArg1 ); }
void getPxJoint_BreakForce( const PxJoint* inObj, PxReal& inArg0, PxReal& inArg1 ) { inObj->getBreakForce( inArg0, inArg1 ); }
void setPxJoint_ConstraintFlags( PxJoint* inObj, PxConstraintFlags inArg){ inObj->setConstraintFlags( inArg ); }
PxConstraintFlags getPxJoint_ConstraintFlags( const PxJoint* inObj ) { return inObj->getConstraintFlags(); }
void setPxJoint_Name( PxJoint* inObj, const char * inArg){ inObj->setName( inArg ); }
const char * getPxJoint_Name( const PxJoint* inObj ) { return inObj->getName(); }
PxScene * getPxJoint_Scene( const PxJoint* inObj ) { return inObj->getScene(); }
PxJointType::Enum getPxJoint_Type( const PxJoint* inObj ) { return inObj->getType(); }
const char * getPxJoint_ClassName( const PxJoint* inObj ) { return inObj->getClassName(); }
PxJointGeneratedInfo::PxJointGeneratedInfo()
	: Actors( "Actors", "actor0", "actor1", setPxJoint_Actors, getPxJoint_Actors)
	, LocalPose( "LocalPose", setPxJoint_LocalPose, getPxJoint_LocalPose)
	, BreakForce( "BreakForce", "force", "torque", setPxJoint_BreakForce, getPxJoint_BreakForce)
	, ConstraintFlags( "ConstraintFlags", setPxJoint_ConstraintFlags, getPxJoint_ConstraintFlags)
	, Name( "Name", setPxJoint_Name, getPxJoint_Name)
	, Scene( "Scene", getPxJoint_Scene)
	, Type( "Type", getPxJoint_Type)
	, ClassName( "ClassName", getPxJoint_ClassName)
	, UserData( "UserData", setPxJointUserData, getPxJointUserData )
{}
void setPxDistanceJoint_MinDistance( PxDistanceJoint* inObj, PxReal inArg){ inObj->setMinDistance( inArg ); }
PxReal getPxDistanceJoint_MinDistance( const PxDistanceJoint* inObj ) { return inObj->getMinDistance(); }
void setPxDistanceJoint_MaxDistance( PxDistanceJoint* inObj, PxReal inArg){ inObj->setMaxDistance( inArg ); }
PxReal getPxDistanceJoint_MaxDistance( const PxDistanceJoint* inObj ) { return inObj->getMaxDistance(); }
void setPxDistanceJoint_Tolerance( PxDistanceJoint* inObj, PxReal inArg){ inObj->setTolerance( inArg ); }
PxReal getPxDistanceJoint_Tolerance( const PxDistanceJoint* inObj ) { return inObj->getTolerance(); }
void setPxDistanceJoint_Spring( PxDistanceJoint* inObj, PxReal inArg){ inObj->setSpring( inArg ); }
PxReal getPxDistanceJoint_Spring( const PxDistanceJoint* inObj ) { return inObj->getSpring(); }
void setPxDistanceJoint_Damping( PxDistanceJoint* inObj, PxReal inArg){ inObj->setDamping( inArg ); }
PxReal getPxDistanceJoint_Damping( const PxDistanceJoint* inObj ) { return inObj->getDamping(); }
void setPxDistanceJoint_DistanceJointFlags( PxDistanceJoint* inObj, PxDistanceJointFlags inArg){ inObj->setDistanceJointFlags( inArg ); }
PxDistanceJointFlags getPxDistanceJoint_DistanceJointFlags( const PxDistanceJoint* inObj ) { return inObj->getDistanceJointFlags(); }
const char * getPxDistanceJoint_ClassName( const PxDistanceJoint* inObj ) { return inObj->getClassName(); }
PxDistanceJointGeneratedInfo::PxDistanceJointGeneratedInfo()
	: MinDistance( "MinDistance", setPxDistanceJoint_MinDistance, getPxDistanceJoint_MinDistance)
	, MaxDistance( "MaxDistance", setPxDistanceJoint_MaxDistance, getPxDistanceJoint_MaxDistance)
	, Tolerance( "Tolerance", setPxDistanceJoint_Tolerance, getPxDistanceJoint_Tolerance)
	, Spring( "Spring", setPxDistanceJoint_Spring, getPxDistanceJoint_Spring)
	, Damping( "Damping", setPxDistanceJoint_Damping, getPxDistanceJoint_Damping)
	, DistanceJointFlags( "DistanceJointFlags", setPxDistanceJoint_DistanceJointFlags, getPxDistanceJoint_DistanceJointFlags)
	, ClassName( "ClassName", getPxDistanceJoint_ClassName)
{}
void setPxFixedJoint_ProjectionLinearTolerance( PxFixedJoint* inObj, PxReal inArg){ inObj->setProjectionLinearTolerance( inArg ); }
PxReal getPxFixedJoint_ProjectionLinearTolerance( const PxFixedJoint* inObj ) { return inObj->getProjectionLinearTolerance(); }
void setPxFixedJoint_ProjectionAngularTolerance( PxFixedJoint* inObj, PxReal inArg){ inObj->setProjectionAngularTolerance( inArg ); }
PxReal getPxFixedJoint_ProjectionAngularTolerance( const PxFixedJoint* inObj ) { return inObj->getProjectionAngularTolerance(); }
const char * getPxFixedJoint_ClassName( const PxFixedJoint* inObj ) { return inObj->getClassName(); }
PxFixedJointGeneratedInfo::PxFixedJointGeneratedInfo()
	: ProjectionLinearTolerance( "ProjectionLinearTolerance", setPxFixedJoint_ProjectionLinearTolerance, getPxFixedJoint_ProjectionLinearTolerance)
	, ProjectionAngularTolerance( "ProjectionAngularTolerance", setPxFixedJoint_ProjectionAngularTolerance, getPxFixedJoint_ProjectionAngularTolerance)
	, ClassName( "ClassName", getPxFixedJoint_ClassName)
{}
inline float getPxJointLimitParametersRestitution( const PxJointLimitParameters* inOwner ) { return inOwner->restitution; }
inline void setPxJointLimitParametersRestitution( PxJointLimitParameters* inOwner, float inData) { inOwner->restitution = inData; }
inline float getPxJointLimitParametersSpring( const PxJointLimitParameters* inOwner ) { return inOwner->spring; }
inline void setPxJointLimitParametersSpring( PxJointLimitParameters* inOwner, float inData) { inOwner->spring = inData; }
inline float getPxJointLimitParametersDamping( const PxJointLimitParameters* inOwner ) { return inOwner->damping; }
inline void setPxJointLimitParametersDamping( PxJointLimitParameters* inOwner, float inData) { inOwner->damping = inData; }
inline float getPxJointLimitParametersContactDistance( const PxJointLimitParameters* inOwner ) { return inOwner->contactDistance; }
inline void setPxJointLimitParametersContactDistance( PxJointLimitParameters* inOwner, float inData) { inOwner->contactDistance = inData; }
_Bool getPxJointLimitParameters_Valid( const PxJointLimitParameters* inObj ) { return inObj->isValid(); }
PxJointLimitParametersGeneratedInfo::PxJointLimitParametersGeneratedInfo()
	: Valid( "Valid", getPxJointLimitParameters_Valid)
	, Restitution( "Restitution", setPxJointLimitParametersRestitution, getPxJointLimitParametersRestitution )
	, Spring( "Spring", setPxJointLimitParametersSpring, getPxJointLimitParametersSpring )
	, Damping( "Damping", setPxJointLimitParametersDamping, getPxJointLimitParametersDamping )
	, ContactDistance( "ContactDistance", setPxJointLimitParametersContactDistance, getPxJointLimitParametersContactDistance )
{}
inline float getPxJointLimitValue( const PxJointLimit* inOwner ) { return inOwner->value; }
inline void setPxJointLimitValue( PxJointLimit* inOwner, float inData) { inOwner->value = inData; }
_Bool getPxJointLimit_Valid( const PxJointLimit* inObj ) { return inObj->isValid(); }
PxJointLimitGeneratedInfo::PxJointLimitGeneratedInfo()
	: Valid( "Valid", getPxJointLimit_Valid)
	, Value( "Value", setPxJointLimitValue, getPxJointLimitValue )
{}
inline float getPxJointLimitPairUpper( const PxJointLimitPair* inOwner ) { return inOwner->upper; }
inline void setPxJointLimitPairUpper( PxJointLimitPair* inOwner, float inData) { inOwner->upper = inData; }
inline float getPxJointLimitPairLower( const PxJointLimitPair* inOwner ) { return inOwner->lower; }
inline void setPxJointLimitPairLower( PxJointLimitPair* inOwner, float inData) { inOwner->lower = inData; }
_Bool getPxJointLimitPair_Valid( const PxJointLimitPair* inObj ) { return inObj->isValid(); }
PxJointLimitPairGeneratedInfo::PxJointLimitPairGeneratedInfo()
	: Valid( "Valid", getPxJointLimitPair_Valid)
	, Upper( "Upper", setPxJointLimitPairUpper, getPxJointLimitPairUpper )
	, Lower( "Lower", setPxJointLimitPairLower, getPxJointLimitPairLower )
{}
inline float getPxJointLimitConeYAngle( const PxJointLimitCone* inOwner ) { return inOwner->yAngle; }
inline void setPxJointLimitConeYAngle( PxJointLimitCone* inOwner, float inData) { inOwner->yAngle = inData; }
inline float getPxJointLimitConeZAngle( const PxJointLimitCone* inOwner ) { return inOwner->zAngle; }
inline void setPxJointLimitConeZAngle( PxJointLimitCone* inOwner, float inData) { inOwner->zAngle = inData; }
_Bool getPxJointLimitCone_Valid( const PxJointLimitCone* inObj ) { return inObj->isValid(); }
PxJointLimitConeGeneratedInfo::PxJointLimitConeGeneratedInfo()
	: Valid( "Valid", getPxJointLimitCone_Valid)
	, YAngle( "YAngle", setPxJointLimitConeYAngle, getPxJointLimitConeYAngle )
	, ZAngle( "ZAngle", setPxJointLimitConeZAngle, getPxJointLimitConeZAngle )
{}
void setPxPrismaticJoint_Limit( PxPrismaticJoint* inObj, const PxJointLimitPair & inArg){ inObj->setLimit( inArg ); }
PxJointLimitPair getPxPrismaticJoint_Limit( const PxPrismaticJoint* inObj ) { return inObj->getLimit(); }
void setPxPrismaticJoint_PrismaticJointFlags( PxPrismaticJoint* inObj, PxPrismaticJointFlags inArg){ inObj->setPrismaticJointFlags( inArg ); }
PxPrismaticJointFlags getPxPrismaticJoint_PrismaticJointFlags( const PxPrismaticJoint* inObj ) { return inObj->getPrismaticJointFlags(); }
void setPxPrismaticJoint_ProjectionLinearTolerance( PxPrismaticJoint* inObj, PxReal inArg){ inObj->setProjectionLinearTolerance( inArg ); }
PxReal getPxPrismaticJoint_ProjectionLinearTolerance( const PxPrismaticJoint* inObj ) { return inObj->getProjectionLinearTolerance(); }
void setPxPrismaticJoint_ProjectionAngularTolerance( PxPrismaticJoint* inObj, PxReal inArg){ inObj->setProjectionAngularTolerance( inArg ); }
PxReal getPxPrismaticJoint_ProjectionAngularTolerance( const PxPrismaticJoint* inObj ) { return inObj->getProjectionAngularTolerance(); }
const char * getPxPrismaticJoint_ClassName( const PxPrismaticJoint* inObj ) { return inObj->getClassName(); }
PxPrismaticJointGeneratedInfo::PxPrismaticJointGeneratedInfo()
	: Limit( "Limit", setPxPrismaticJoint_Limit, getPxPrismaticJoint_Limit)
	, PrismaticJointFlags( "PrismaticJointFlags", setPxPrismaticJoint_PrismaticJointFlags, getPxPrismaticJoint_PrismaticJointFlags)
	, ProjectionLinearTolerance( "ProjectionLinearTolerance", setPxPrismaticJoint_ProjectionLinearTolerance, getPxPrismaticJoint_ProjectionLinearTolerance)
	, ProjectionAngularTolerance( "ProjectionAngularTolerance", setPxPrismaticJoint_ProjectionAngularTolerance, getPxPrismaticJoint_ProjectionAngularTolerance)
	, ClassName( "ClassName", getPxPrismaticJoint_ClassName)
{}
void setPxRevoluteJoint_Limit( PxRevoluteJoint* inObj, const PxJointLimitPair & inArg){ inObj->setLimit( inArg ); }
PxJointLimitPair getPxRevoluteJoint_Limit( const PxRevoluteJoint* inObj ) { return inObj->getLimit(); }
void setPxRevoluteJoint_DriveVelocity( PxRevoluteJoint* inObj, PxReal inArg){ inObj->setDriveVelocity( inArg ); }
PxReal getPxRevoluteJoint_DriveVelocity( const PxRevoluteJoint* inObj ) { return inObj->getDriveVelocity(); }
void setPxRevoluteJoint_DriveForceLimit( PxRevoluteJoint* inObj, PxReal inArg){ inObj->setDriveForceLimit( inArg ); }
PxReal getPxRevoluteJoint_DriveForceLimit( const PxRevoluteJoint* inObj ) { return inObj->getDriveForceLimit(); }
void setPxRevoluteJoint_DriveGearRatio( PxRevoluteJoint* inObj, PxReal inArg){ inObj->setDriveGearRatio( inArg ); }
PxReal getPxRevoluteJoint_DriveGearRatio( const PxRevoluteJoint* inObj ) { return inObj->getDriveGearRatio(); }
void setPxRevoluteJoint_RevoluteJointFlags( PxRevoluteJoint* inObj, PxRevoluteJointFlags inArg){ inObj->setRevoluteJointFlags( inArg ); }
PxRevoluteJointFlags getPxRevoluteJoint_RevoluteJointFlags( const PxRevoluteJoint* inObj ) { return inObj->getRevoluteJointFlags(); }
void setPxRevoluteJoint_ProjectionLinearTolerance( PxRevoluteJoint* inObj, PxReal inArg){ inObj->setProjectionLinearTolerance( inArg ); }
PxReal getPxRevoluteJoint_ProjectionLinearTolerance( const PxRevoluteJoint* inObj ) { return inObj->getProjectionLinearTolerance(); }
void setPxRevoluteJoint_ProjectionAngularTolerance( PxRevoluteJoint* inObj, PxReal inArg){ inObj->setProjectionAngularTolerance( inArg ); }
PxReal getPxRevoluteJoint_ProjectionAngularTolerance( const PxRevoluteJoint* inObj ) { return inObj->getProjectionAngularTolerance(); }
const char * getPxRevoluteJoint_ClassName( const PxRevoluteJoint* inObj ) { return inObj->getClassName(); }
PxRevoluteJointGeneratedInfo::PxRevoluteJointGeneratedInfo()
	: Limit( "Limit", setPxRevoluteJoint_Limit, getPxRevoluteJoint_Limit)
	, DriveVelocity( "DriveVelocity", setPxRevoluteJoint_DriveVelocity, getPxRevoluteJoint_DriveVelocity)
	, DriveForceLimit( "DriveForceLimit", setPxRevoluteJoint_DriveForceLimit, getPxRevoluteJoint_DriveForceLimit)
	, DriveGearRatio( "DriveGearRatio", setPxRevoluteJoint_DriveGearRatio, getPxRevoluteJoint_DriveGearRatio)
	, RevoluteJointFlags( "RevoluteJointFlags", setPxRevoluteJoint_RevoluteJointFlags, getPxRevoluteJoint_RevoluteJointFlags)
	, ProjectionLinearTolerance( "ProjectionLinearTolerance", setPxRevoluteJoint_ProjectionLinearTolerance, getPxRevoluteJoint_ProjectionLinearTolerance)
	, ProjectionAngularTolerance( "ProjectionAngularTolerance", setPxRevoluteJoint_ProjectionAngularTolerance, getPxRevoluteJoint_ProjectionAngularTolerance)
	, ClassName( "ClassName", getPxRevoluteJoint_ClassName)
{}
void setPxSphericalJoint_LimitCone( PxSphericalJoint* inObj, const PxJointLimitCone & inArg){ inObj->setLimitCone( inArg ); }
PxJointLimitCone getPxSphericalJoint_LimitCone( const PxSphericalJoint* inObj ) { return inObj->getLimitCone(); }
void setPxSphericalJoint_SphericalJointFlags( PxSphericalJoint* inObj, PxSphericalJointFlags inArg){ inObj->setSphericalJointFlags( inArg ); }
PxSphericalJointFlags getPxSphericalJoint_SphericalJointFlags( const PxSphericalJoint* inObj ) { return inObj->getSphericalJointFlags(); }
void setPxSphericalJoint_ProjectionLinearTolerance( PxSphericalJoint* inObj, PxReal inArg){ inObj->setProjectionLinearTolerance( inArg ); }
PxReal getPxSphericalJoint_ProjectionLinearTolerance( const PxSphericalJoint* inObj ) { return inObj->getProjectionLinearTolerance(); }
const char * getPxSphericalJoint_ClassName( const PxSphericalJoint* inObj ) { return inObj->getClassName(); }
PxSphericalJointGeneratedInfo::PxSphericalJointGeneratedInfo()
	: LimitCone( "LimitCone", setPxSphericalJoint_LimitCone, getPxSphericalJoint_LimitCone)
	, SphericalJointFlags( "SphericalJointFlags", setPxSphericalJoint_SphericalJointFlags, getPxSphericalJoint_SphericalJointFlags)
	, ProjectionLinearTolerance( "ProjectionLinearTolerance", setPxSphericalJoint_ProjectionLinearTolerance, getPxSphericalJoint_ProjectionLinearTolerance)
	, ClassName( "ClassName", getPxSphericalJoint_ClassName)
{}
void setPxD6Joint_Motion( PxD6Joint* inObj, PxD6Axis::Enum inIndex, PxD6Motion::Enum inArg ){ inObj->setMotion( inIndex, inArg ); }
PxD6Motion::Enum getPxD6Joint_Motion( const PxD6Joint* inObj, PxD6Axis::Enum inIndex ) { return inObj->getMotion( inIndex ); }
void setPxD6Joint_LinearLimit( PxD6Joint* inObj, const PxJointLimit & inArg){ inObj->setLinearLimit( inArg ); }
PxJointLimit getPxD6Joint_LinearLimit( const PxD6Joint* inObj ) { return inObj->getLinearLimit(); }
void setPxD6Joint_TwistLimit( PxD6Joint* inObj, const PxJointLimitPair & inArg){ inObj->setTwistLimit( inArg ); }
PxJointLimitPair getPxD6Joint_TwistLimit( const PxD6Joint* inObj ) { return inObj->getTwistLimit(); }
void setPxD6Joint_SwingLimit( PxD6Joint* inObj, const PxJointLimitCone & inArg){ inObj->setSwingLimit( inArg ); }
PxJointLimitCone getPxD6Joint_SwingLimit( const PxD6Joint* inObj ) { return inObj->getSwingLimit(); }
void setPxD6Joint_Drive( PxD6Joint* inObj, PxD6Drive::Enum inIndex, PxD6JointDrive inArg ){ inObj->setDrive( inIndex, inArg ); }
PxD6JointDrive getPxD6Joint_Drive( const PxD6Joint* inObj, PxD6Drive::Enum inIndex ) { return inObj->getDrive( inIndex ); }
void setPxD6Joint_DrivePosition( PxD6Joint* inObj, const PxTransform & inArg){ inObj->setDrivePosition( inArg ); }
PxTransform getPxD6Joint_DrivePosition( const PxD6Joint* inObj ) { return inObj->getDrivePosition(); }
void setPxD6Joint_DriveVelocity( PxD6Joint* inObj, PxVec3 inArg0, PxVec3 inArg1 ) { inObj->setDriveVelocity( inArg0, inArg1 ); }
void getPxD6Joint_DriveVelocity( const PxD6Joint* inObj, PxVec3& inArg0, PxVec3& inArg1 ) { inObj->getDriveVelocity( inArg0, inArg1 ); }
void setPxD6Joint_ProjectionLinearTolerance( PxD6Joint* inObj, PxReal inArg){ inObj->setProjectionLinearTolerance( inArg ); }
PxReal getPxD6Joint_ProjectionLinearTolerance( const PxD6Joint* inObj ) { return inObj->getProjectionLinearTolerance(); }
void setPxD6Joint_ProjectionAngularTolerance( PxD6Joint* inObj, PxReal inArg){ inObj->setProjectionAngularTolerance( inArg ); }
PxReal getPxD6Joint_ProjectionAngularTolerance( const PxD6Joint* inObj ) { return inObj->getProjectionAngularTolerance(); }
const char * getPxD6Joint_ClassName( const PxD6Joint* inObj ) { return inObj->getClassName(); }
PxD6JointGeneratedInfo::PxD6JointGeneratedInfo()
	: Motion( "Motion", setPxD6Joint_Motion, getPxD6Joint_Motion)
	, LinearLimit( "LinearLimit", setPxD6Joint_LinearLimit, getPxD6Joint_LinearLimit)
	, TwistLimit( "TwistLimit", setPxD6Joint_TwistLimit, getPxD6Joint_TwistLimit)
	, SwingLimit( "SwingLimit", setPxD6Joint_SwingLimit, getPxD6Joint_SwingLimit)
	, Drive( "Drive", setPxD6Joint_Drive, getPxD6Joint_Drive)
	, DrivePosition( "DrivePosition", setPxD6Joint_DrivePosition, getPxD6Joint_DrivePosition)
	, DriveVelocity( "DriveVelocity", "linear", "angular", setPxD6Joint_DriveVelocity, getPxD6Joint_DriveVelocity)
	, ProjectionLinearTolerance( "ProjectionLinearTolerance", setPxD6Joint_ProjectionLinearTolerance, getPxD6Joint_ProjectionLinearTolerance)
	, ProjectionAngularTolerance( "ProjectionAngularTolerance", setPxD6Joint_ProjectionAngularTolerance, getPxD6Joint_ProjectionAngularTolerance)
	, ClassName( "ClassName", getPxD6Joint_ClassName)
{}
inline float getPxD6JointDriveSpring( const PxD6JointDrive* inOwner ) { return inOwner->spring; }
inline void setPxD6JointDriveSpring( PxD6JointDrive* inOwner, float inData) { inOwner->spring = inData; }
inline float getPxD6JointDriveDamping( const PxD6JointDrive* inOwner ) { return inOwner->damping; }
inline void setPxD6JointDriveDamping( PxD6JointDrive* inOwner, float inData) { inOwner->damping = inData; }
inline float getPxD6JointDriveForceLimit( const PxD6JointDrive* inOwner ) { return inOwner->forceLimit; }
inline void setPxD6JointDriveForceLimit( PxD6JointDrive* inOwner, float inData) { inOwner->forceLimit = inData; }
inline PxFlags<PxD6JointDriveFlag::Enum, PxU32> getPxD6JointDriveFlags( const PxD6JointDrive* inOwner ) { return inOwner->flags; }
inline void setPxD6JointDriveFlags( PxD6JointDrive* inOwner, PxFlags<PxD6JointDriveFlag::Enum, PxU32> inData) { inOwner->flags = inData; }
_Bool getPxD6JointDrive_Valid( const PxD6JointDrive* inObj ) { return inObj->isValid(); }
PxD6JointDriveGeneratedInfo::PxD6JointDriveGeneratedInfo()
	: Valid( "Valid", getPxD6JointDrive_Valid)
	, Spring( "Spring", setPxD6JointDriveSpring, getPxD6JointDriveSpring )
	, Damping( "Damping", setPxD6JointDriveDamping, getPxD6JointDriveDamping )
	, ForceLimit( "ForceLimit", setPxD6JointDriveForceLimit, getPxD6JointDriveForceLimit )
	, Flags( "Flags", setPxD6JointDriveFlags, getPxD6JointDriveFlags )
{}
